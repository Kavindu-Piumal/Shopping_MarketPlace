import React, { useEffect } from "react";
import { IoClose } from "react-icons/io5";
import { Link, useNavigate } from "react-router-dom";
import { useGlobalcontext } from "../provider/globaleProvider";
import { DisplayPriceInRupees } from "../utils/displaypriceinrupees";
import { PriceWithDiscount } from "../utils/PricewithDiscount";
import { FaRegHandPointRight, FaCartPlus } from "react-icons/fa";
import { useSelector } from "react-redux";
import AddtoCartButton from "./addtoCartButton";
import emptycart from "../assets/emptycart.png";
import { useNotification } from "../context/NotificationContext";

const DisplayCartItem = ({ close }) => {
  const { showError } = useNotification();
  const { notdiscountTotalPrice, totalPrice, totalQty } = useGlobalcontext();
  const cartItem = useSelector((state) => state.cartItem.cart);
  const user=useSelector((state) => state.user);
  const navigate = useNavigate();
  const redirectToCheckOutPage=() => {
    if (user?._id) {      navigate("/checkout");
      if(close) {
        close();
      }
      return;
    }
    showError("Please login to continue");
    navigate("/login");
  }
  

  // Handle click outside to close cart - for notification panel style
  useEffect(() => {
    const handleEscapeKey = (e) => {
      if (e.key === 'Escape' && close) {
        e.preventDefault();
        closeCart();
      }
    };

    const handleClickOutside = (e) => {
      // Check if click is outside the cart notification panel
      const cartPanel = document.querySelector('.cart-notification-panel');
      if (cartPanel && !cartPanel.contains(e.target) && close) {
        e.preventDefault();
        e.stopPropagation();
        console.log('Clicked outside cart panel'); // Debug
        closeCart();
      }
    };

    if (close) {
      document.addEventListener('keydown', handleEscapeKey);
      document.addEventListener('click', handleClickOutside);
      document.addEventListener('touchstart', handleClickOutside); // For mobile touch
      
      return () => {
        document.removeEventListener('keydown', handleEscapeKey);
        document.removeEventListener('click', handleClickOutside);
        document.removeEventListener('touchstart', handleClickOutside);
      };
    }
  }, [close]);

  // Prevent event propagation when clicking inside the cart
  const handleCartClick = (e) => {
    e.stopPropagation();
  };

  // Handle backdrop click to close cart
  const handleBackdropClick = (e) => {
    // Only close if clicking directly on the backdrop, not on child elements
    if (e.target === e.currentTarget) {
      console.log('Backdrop clicked directly'); // Debug log
      closeCart();
    }
  };

  const handleBackdropTouch = (e) => {
    // Only close if touching directly on the backdrop, not on child elements
    if (e.target === e.currentTarget) {
      console.log('Backdrop touched directly'); // Debug log
      closeCart();
    }
  };

  // Simple, direct close handler - no complex event handling
  const closeCart = () => {
    console.log('Direct close cart called'); // Debug
    
    // Restore body scroll when closing
    document.body.style.overflow = 'auto';
    
    // Method 1: Try the close function
    if (close && typeof close === 'function') {
      try {
        close();
        console.log('Close function executed'); // Debug
        return;
      } catch (error) {
        console.error('Error calling close function:', error);
      }
    }
    
    // Method 2: Force close by hiding the cart
    const cartPanel = document.querySelector('.cart-notification-panel');
    if (cartPanel) {
      cartPanel.style.display = 'none';
      console.log('Cart hidden via DOM manipulation'); // Debug
    }
    
    // Method 3: Dispatch a custom event to close cart
    window.dispatchEvent(new CustomEvent('closeCart'));
    console.log('Close cart event dispatched'); // Debug
  };

  // Alternative: Use a ref-based approach
  const handleCloseButton = () => {
    console.log('Handle close button pressed'); // Debug
    closeCart();
  };

  // Prevent body scroll when cart is open (optional - for better mobile UX)
  useEffect(() => {
    // Only prevent scroll on mobile to maintain overlay behavior
    const isMobile = window.innerWidth < 1024;
    if (isMobile) {
      document.body.style.overflow = 'hidden';
    }
    
    return () => {
      document.body.style.overflow = 'auto';
    };
  }, []);

  return (
    <div className="bg-white rounded-lg shadow-2xl border border-gray-200 w-80 max-w-[calc(100vw-2rem)] max-h-[calc(100vh-6rem)] flex flex-col overflow-hidden">
        <div className="flex items-center justify-between gap-3 p-4 border-b bg-gradient-to-r from-green-50 to-emerald-50">
          <div className="flex items-center gap-2">
            <div className="p-2 bg-green-100 rounded-full">
              <FaCartPlus className="text-green-600" size={16} />
            </div>
            <h2 className="font-semibold text-gray-800">My Cart</h2>
            {cartItem.filter(item => item && item.productId).length > 0 && (
              <span className="bg-green-500 text-white text-xs px-2 py-1 rounded-full">
                {totalQty}
              </span>
            )}
          </div>
          <div className="flex items-center gap-2">
            {/* Text close button as backup */}
            <button 
              onClick={closeCart}
              className="px-3 py-1 bg-red-100 hover:bg-red-200 text-red-700 text-sm rounded-lg font-medium"
              type="button"
            >
              CLOSE
            </button>
            {/* Icon close button */}
            <button 
              onClick={closeCart}
              className="p-2 hover:bg-red-100 active:bg-red-200 rounded-full transition-colors"
              type="button"
              aria-label="Close cart"
              style={{ 
                touchAction: 'manipulation',
                WebkitTapHighlightColor: 'transparent',
                userSelect: 'none',
                zIndex: 999,
                minWidth: '44px',
                minHeight: '44px',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center'
              }}
            >
              <IoClose size={26} className="text-gray-700 pointer-events-none" />
            </button>
          </div>
        </div>
        <div className="flex-1 overflow-y-auto">
          {/* display items */}          {cartItem.filter(item => item && item.productId).length > 0 ? (
            <>
              <div className="flex items-center rounded justify-between px-4 py-3 bg-blue-50 text-blue-600 text-sm">
                <p className="font-medium">💰 Your Total Savings</p>
                <p className="font-semibold">
                  {DisplayPriceInRupees(notdiscountTotalPrice - totalPrice)}
                </p>
              </div>              <div className="p-4 lg:p-4 space-y-3 overflow-y-auto lg:max-h-[300px]">
                {cartItem.filter(item => item && item.productId).map((item, index) => {
                    return (
                      <div
                        className="flex items-center gap-3 p-3 bg-gray-50 rounded-xl hover:bg-gray-100 transition-colors"
                        key={index}
                      >
                        <div className="w-16 h-16 lg:w-16 lg:h-16 flex-shrink-0 bg-white rounded-lg p-2 shadow-sm">
                          <img
                            src={item?.productId?.image[0]}
                            className="w-full h-full object-cover rounded"
                            alt={item?.productId?.name}
                          />
                        </div>
                        <div className="flex-1 min-w-0">
                          <p className="text-sm lg:text-sm font-semibold text-gray-800 line-clamp-2">
                            {item?.productId?.name}
                          </p>
                          <p className="text-xs text-gray-500">{item?.productId?.unit}</p>
                          <div className="flex items-center gap-2 mt-1">
                            <p className="text-sm lg:text-sm font-bold text-green-600">
                              {DisplayPriceInRupees(
                                PriceWithDiscount(
                                  item?.productId?.price,
                                  item?.productId?.discount
                                )
                              )}
                            </p>
                            {item?.productId?.discount && (
                              <p className="text-gray-400 line-through text-xs">
                                {DisplayPriceInRupees(item?.productId?.price)}
                              </p>
                            )}
                          </div>
                        </div>
                        <div className="flex-shrink-0">
                          <AddtoCartButton data={item?.productId} />
                        </div>
                      </div>
                    );
                  })}
              </div>
              <div className="bg-gradient-to-r from-blue-50 to-indigo-50 p-4 mx-4 rounded-xl mb-4">
                <h3 className="font-semibold text-gray-800 mb-3 flex items-center gap-2">
                  📄 Bill Summary
                </h3>
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between items-center">
                    <span className="text-gray-600">Items Total</span>
                    <div className="flex items-center gap-2">
                      <span className="line-through text-gray-400 text-xs">
                        {DisplayPriceInRupees(notdiscountTotalPrice)}
                      </span>
                      <span className="font-semibold">{DisplayPriceInRupees(totalPrice)}</span>
                    </div>
                  </div>

                  <div className="flex justify-between items-center">
                    <span className="text-gray-600">Total Quantity</span>
                    <span className="font-semibold text-blue-600">{totalQty} items</span>
                  </div>

                  <div className="flex justify-between items-center">
                    <span className="text-gray-600">Delivery</span>
                    <span className="font-semibold text-green-600">COD</span>
                  </div>

                  <div className="border-t pt-2 mt-3">
                    <div className="flex justify-between items-center">
                      <span className="font-bold text-gray-800">Grand Total</span>
                      <span className="font-bold text-lg text-green-600">{DisplayPriceInRupees(totalPrice)}</span>
                    </div>
                  </div>
                </div>
              </div>
            </>
          ) : (
            <div className="p-6 lg:p-6 text-center flex-1 flex flex-col justify-center">
              <img
                src={emptycart}
                alt="empty cart"
                className="w-32 h-32 lg:w-32 lg:h-32 mx-auto mb-4 opacity-50"
              />
              <p className="text-gray-500 mb-4 text-base lg:text-sm">Your cart is empty</p>
              <Link
                to={"/"}
                onClick={close}
                className="inline-block bg-gradient-to-r from-green-500 to-emerald-500 text-white px-6 py-3 lg:px-6 lg:py-2 rounded-xl font-medium hover:from-green-600 hover:to-emerald-600 transition-all"
              >
                🛍️ Start Shopping
              </Link>
            </div>
          )}
        </div>
        
        {/* Checkout section */}
        {cartItem.filter(item => item && item.productId).length > 0 && (
          <div className="flex-shrink-0 p-4 lg:p-4 border-t bg-white">
            <button 
              onClick={redirectToCheckOutPage} 
              className="w-full bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white py-4 lg:py-3 px-4 rounded-xl font-semibold transition-all flex items-center justify-center gap-2 shadow-lg text-base lg:text-sm"
            >
              <span>Proceed to Checkout</span>
              <span className="text-lg lg:text-base">{DisplayPriceInRupees(totalPrice)}</span>
              <FaRegHandPointRight />
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default DisplayCartItem;
